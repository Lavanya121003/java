1. Features of java:

   a. security:java is fully secured with all the tools which are required.
   b.runtime environment-java spports for multiple devices 
   c.principles-there are 4 principles such as ploymorphism,inheritance,abstraction,encapsulation.
   d.Interpreted:java is interpreted  language.which converts from source code to byte code.
   
   
  
2.  JDk-JDK stands for Java Development Kit.
         JDK contains all the tools required for the java program execution.  
	JRE-JRE stands for Java runtime environment 
		where the java programs can be executed in any environment.
	JVM-JVM stands for Java virtual machine 
		java programs can be excuted in any devices where it can run the programs.
		Java supports for the multiple devices/machines for compilation.
		
		
3. Data types of JAVA:
  there are 2 types of data types:
  1.Primitive datatype
  2.Non-primitive datatype 
  
  1.primitive datatype:There are 8 types of primitive datatype:
 such as:
 1.Byte
 2.short
 3.int
 4.long
 5.float
 6.double
 7.boolean
 8.char
  
  2.Non-primitive datatype:The non-primitive datatypes are:
   such as:
   1.System
   2.Array
   3.String
   
   
     The default values of primitive datatype are:
	 1.Byte-0
	 2.short-0
	 3.int-0
	 4.long-0.0
	 5.float-0.0
	 6.double-0.0
	 7.boolean-false
	 8.char-'a'
	 
	 The default  values of non -primitive datatype are:
    1.Array-[0,0]	
	2.String-"null"


4.      Primitive datatype                                   Non-primitive datatype	
	 
		a.there is no variables and methods                a.there is variables and methods
	    b.these are keywords                               b.these are instances
		c.it does not use .(dot) operator                  c.it uses a .(dot) operator
		d.there are 8 types of primitive datatype          d.these are only few non-primitive datatype
		
		
5.  Static variable:
                    static variable is type of variable ,it is also called as class variable.
                    static variable is used for the value of variable to be static or constant.
	
    Instance variable:
                      Instance variable is also a type of variable,it is also called as non-static variable.
					  Instance variable are used to declare a variable using the instances/refname with datatype within a class.
				 
		the method is declare with  a static keyword is called as Static variable.
        the method with no name of static  keyword is called as non-static or instance variable.

ex:public class laptop
   {
      String name="hp";---------->instance variable
	  Static  version=11;--------->static variable
	
	System.out.println("the name of a laptop:"+name);
	Sytstem.out.println("version of laptop:"+version);
	}
	
	
6.	The main method of java program is :
    Public static void main(String[] args)
	   
	    here public - is access specifier
		     static-is keyword
			 void-is rerurn type
			 main-name of a method
			 String[]-is a datatype
			 args-is a arguement
			 
		 the command line arguement is used to pass the values.
         instead  of args we can use values,run etc in place of args.


7.method chaining:The chaining is a invoking a method using a this keyword.	
                  where the this keyword is used when the instance variable and  method names are similar.
                   this keyword is optional.	

				   
	public class Laptop{
	    String name;
		String varsion;
		  
		  public Laptop(string name,string version)
		  {
		   this.name=name;
		   this.version=version;
		   }
		 
		 
	public class LaptopRunner
	{
	public static void main(String[] args)
	{
	   Laptop lp=new Laptop("hp","windows");
	   System.out.println("name of a laptop"+this.name);
	   System.out.println("version of laptop"+this.version);
	   }
	}
	
	
	
8.a.error:there is no main method
  b.error:no initialization of marks for the array    
  c.compiler is good(runs the program)
  d.this is get person details mathod
  e.x,y is a class variable
  f.error:there is no myRect.area() in the program.
  
  
  d.
      1. values if i=11 and n=11%5
      2.final values of i=11 n=11%5(i++)
	     (++i)--->i=12 n=12%5
	     
  
  
  9.public class Student
  {
     String[] StudentName=["rama","shama","seeta","bhama"];
	 int[] marks=[10,20,30,40];
	 
	 public void Student(String[] names,int[] marks)
	 {
	  System.out.println(the average marks is 25:");
	   int average marks=25;
	   
	  if(int[i]<average marks)
	  {
	      return 'i';
		  
	  }
	 

10.class Fan
   {
     boolean isconnected=true;
	 byte maxSpeed=3;
	 byte minSpeed=2;
	 byte currentSpeed=1;
	 
	 
	 public void onOrOff()
	 {
	   String state="on/off";
	   System.out.println("the fan is on/off:"+state);
	   }
	   public void increaseSpeed()
	   {
	      for(int i=1;i=currentSpeed+1;i++)
		  {
		      return'maxSpeed';
		  }
			  System.out.println("increases the fan speed:");
	   }
	   public void decreaseSpeed()
	   {
	     for(int i=1;i=currentSpeed-1;i--)
	   
	   {
	   return 'minSpeed';
	   }
	    Sytstem.out.println("decreases the speed by 1:");
		}
		
		
		public class FanRunner{
		 public static void main(String[] args)
		 {
		     Fan.fan=new Fan();
			 fan.onOrOff();
			 fan.increaseSpeed();
			 fan.decreaseSpeed();
			 }
		 }
			 
		
	   
	   
	   
	   
	   
			 
12. Stack overflow:
                    stack overflow is type of error that occurs when the memory of stack is full. 	     
	    
11.this.---> is a variable chaining
where the this keyword is used when the instance variable and  method names are similar.
                   this keyword is optional.
				   
    this()--->is a method chaining
	in method chaining the super keyword is used.
	where super()is a method chaining.
	it is used to inherit the other class with existing class.
	
	
	ex:
	public class Animal
	{
	String name;
	 void Animal( string name)
	 {
	    this.name=name;
	 {
	    System.out.println("name of a animal"+this.name);
	 }
	 }
	 }
	 
	 public class Mammal extends Animal{
	 String mammalName;
	 
	 void mammal( string name,string mammalName)
	 {
	    super(name);
		this.mammalName=mammalName;
	 {
	  system.out.println("mammal is running"+this.mammalName);
	  
	 }
	 }
	public class AnimalRunner{
	   public static void main(string[] args)
	   {
	    Animal animal=new Animal("dog");
		animal.name;
		Mammal mammal=new Mammal("dog","camel");
		mammal.mammalName;
		}
		}
		
	
	    
	 
	 
	   
                     		